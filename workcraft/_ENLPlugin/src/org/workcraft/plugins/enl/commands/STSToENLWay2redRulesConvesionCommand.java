package org.workcraft.plugins.enl.commands;

import java.time.Duration;
import java.time.Instant;

import org.workcraft.commands.AbstractConversionCommand;
import org.workcraft.plugins.enl.ENLDescriptor;
import org.workcraft.plugins.enl.tools.STSToENLWayTowConverter;
import org.workcraft.plugins.sts.STS;
import org.workcraft.plugins.sts.VisualSTS;
import org.workcraft.utils.DialogUtils;
import org.workcraft.utils.Hierarchy;
import org.workcraft.utils.WorkspaceUtils;
import org.workcraft.workspace.ModelEntry;
import org.workcraft.workspace.WorkspaceEntry;

public class STSToENLWay2redRulesConvesionCommand extends AbstractConversionCommand {
    @Override
    public String getDisplayName() {
        return "Net synthesis-[method II: by checking whether an ST-system is isomorphic to the ST-system "
                + "generated by enl^{" + "\u224F" + "}_{ts}, and applying reduction rules]";
    }

    @Override
    public boolean isApplicableTo(WorkspaceEntry we) {
        return WorkspaceUtils.isApplicableExact(we, STS.class);
    }

    @Override
    public ModelEntry convert(ModelEntry me) {
        if (Hierarchy.isHierarchical(me)) {
            DialogUtils.showError("STS cannot be derived from a hierarchical ENL.");
            return null;
        }
        Instant start = Instant.now();
        final VisualSTS sts = me.getAs(VisualSTS.class);
        final STSToENLWayTowConverter converter = new STSToENLWayTowConverter(sts,true);
        ModelEntry m = new ModelEntry(new ENLDescriptor(), converter.getENL());
        if (converter.getHasLocalities()) {
            if (converter.getIsENlsystem()) {
                if (STSToENLWayTowConverter.isIsomorphic()) {
                    Instant end = Instant.now();
                    long time = Duration.between(start, end).toMillis();
//                    System.out.println("Execution time of Method II is " + time + " MilliSeconds");
                    STS.recordTime(time);
                    DialogUtils.showInfo("The given ts is isomorphic to the generated ts_{enl^{" + "\u224F"
                            + "}_{ts}} w.r.t " + "\u224F" + STS.getCoRe() + "So, it can be synthesised to an ENL_{"
                            + "\u224F" + "}-system with applying reduction rules.");
//                    STSToENLWayTowConverter.applyStratigy231();
//                    Instant end2 = Instant.now();
//                    long time2 = Duration.between(start, end2).toMillis();
//                    System.out.println("Execution time of strategy (2, 3, 1) is " + time2 + " MilliSeconds");
//                    STS.recordTime3(time2);
                    converter.setHasLocalities();
                    return m;
                } else {
                    Instant end = Instant.now();
                    long time = Duration.between(start, end).toMillis();
                    System.out.println(time);
                    STS.recordTime(time);
                    DialogUtils.showWarning("The given ts is not synthesisable within the class of ENL_{" + "\u224F"
                            + "}-systems, because it is not isomorphic to ts_{enl^{" + "\u224F" + "}_{ts}}.");
                    return null;
                }
            } else {
                DialogUtils.showWarning(
                        "The given ts is not synthesisable within the class of ENL-systems, because enl is not enl^{"
                                + "\u224F" + "}_{ts}.");
                return null;
            }
        } else {
            return null;
        }
    }
}